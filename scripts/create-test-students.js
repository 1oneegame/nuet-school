const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('../backend/models/User');
require('dotenv').config({ path: '../.env' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const MONGODB_URI = process.env.MONGODB_URI

async function createTestStudents() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(MONGODB_URI, {
      bufferCommands: false,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      maxPoolSize: 10,
      minPoolSize: 5,
    });
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const hashedPassword = await bcrypt.hash('student123', 12);

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-—Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const testStudents = [
      {
        _id: new mongoose.Types.ObjectId('507f1f77bcf86cd799439011'), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        email: 'student1@test.com',
        password: hashedPassword,
        whatsappNumber: '+77771234567',
        firstName: '–ê–π–¥–∞—Ä',
        lastName: '–¢–µ—Å—Ç–æ–≤',
        role: 'Student',
        hasStudentAccess: true,
        isSchoolStudent: true,
        isEmailVerified: true,
        isWhatsappVerified: true,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        _id: new mongoose.Types.ObjectId('507f1f77bcf86cd799439012'), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        email: 'student2@test.com',
        password: hashedPassword,
        whatsappNumber: '+77771234568',
        firstName: '–ê–º–∏–Ω–∞',
        lastName: '–°—Ç—É–¥–µ–Ω—Ç–æ–≤–∞',
        role: 'Student',
        hasStudentAccess: true,
        isSchoolStudent: true,
        isEmailVerified: true,
        isWhatsappVerified: true,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        _id: new mongoose.Types.ObjectId('507f1f77bcf86cd799439013'), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        email: 'student3@test.com',
        password: hashedPassword,
        whatsappNumber: '+77771234569',
        firstName: '–î–∞–Ω–∏—è—Ä',
        lastName: '–£—á–µ–Ω–∏–∫–æ–≤–∏—á',
        role: 'Student',
        hasStudentAccess: true,
        isSchoolStudent: true,
        isEmailVerified: true,
        isWhatsappVerified: true,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    await User.deleteMany({ 
      email: { 
        $in: ['student1@test.com', 'student2@test.com', 'student3@test.com'] 
      } 
    });
    
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdStudents = await User.insertMany(testStudents);
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-—Å—Ç—É–¥–µ–Ω—Ç—ã:');
    createdStudents.forEach((student, index) => {
      console.log(`${index + 1}. ${student.firstName} ${student.lastName}`);
      console.log(`   Email: ${student.email}`);
      console.log(`   WhatsApp: ${student.whatsappNumber}`);
      console.log(`   ID: ${student._id}`);
      console.log(`   –†–æ–ª—å: ${student.role}`);
      console.log(`   –î–æ—Å—Ç—É–ø –∫ –¥–∞—à–±–æ—Ä–¥—É: ${student.hasStudentAccess}`);
      console.log('   ---');
    });

    console.log('\nüìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: student123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  createTestStudents();
}

module.exports = createTestStudents;