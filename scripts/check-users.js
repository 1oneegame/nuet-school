const mongoose = require('mongoose');
require('dotenv').config({ path: '.env.local' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
const userSchema = new mongoose.Schema({
  email: String,
  firstName: String,
  lastName: String,
  whatsappNumber: String,
  role: String,
  hasStudentAccess: Boolean,
  isEmailVerified: Boolean,
  isWhatsappVerified: Boolean,
  isActive: Boolean,
  createdAt: Date
}, { collection: 'users' });

const User = mongoose.model('User', userSchema);

const checkUsers = async () => {
  try {
    await connectDB();
    
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.find({}).select('email firstName lastName role hasStudentAccess isEmailVerified isWhatsappVerified isActive createdAt').lean();
    
    console.log(`\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${users.length}`);
    
    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log('\nüë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    console.log('=' .repeat(80));
    
    users.forEach((user, index) => {
      console.log(`${index + 1}. Email: ${user.email}`);
      console.log(`   –ò–º—è: ${user.firstName} ${user.lastName}`);
      console.log(`   –†–æ–ª—å: ${user.role}`);
      console.log(`   –î–æ—Å—Ç—É–ø –∫ –¥–∞—à–±–æ—Ä–¥—É: ${user.hasStudentAccess ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      console.log(`   Email –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.isEmailVerified ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      console.log(`   WhatsApp –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.isWhatsappVerified ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${user.isActive ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${user.createdAt}`);
      console.log('-'.repeat(80));
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = {
      total: users.length,
      withAccess: users.filter(u => u.hasStudentAccess).length,
      verified: users.filter(u => u.isEmailVerified && u.isWhatsappVerified).length,
      active: users.filter(u => u.isActive).length,
      admins: users.filter(u => u.role === 'Admin').length,
      students: users.filter(u => u.role === 'Student').length
    };
    
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}`);
    console.log(`–° –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞—à–±–æ—Ä–¥—É: ${stats.withAccess}`);
    console.log(`–ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.verified}`);
    console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}`);
    console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.admins}`);
    console.log(`–°—Ç—É–¥–µ–Ω—Ç–æ–≤: ${stats.students}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
};

checkUsers();