const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config({ path: '.env.local' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
const userSchema = new mongoose.Schema({
  email: String,
  password: String,
  firstName: String,
  lastName: String,
  whatsappNumber: String,
  role: String,
  hasStudentAccess: Boolean,
  isSchoolStudent: Boolean,
  isEmailVerified: Boolean,
  isWhatsappVerified: Boolean,
  isActive: Boolean,
  loginAttempts: { type: Number, default: 0 },
  createdAt: { type: Date, default: Date.now }
}, { collection: 'users' });

const User = mongoose.model('User', userSchema);

const createAdminUser = async () => {
  try {
    await connectDB();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    const existingAdmin = await User.findOne({ email: 'admin@test.com' });
    
    if (existingAdmin) {
      console.log('üë§ –ê–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
      console.log(`   Email: ${existingAdmin.email}`);
      console.log(`   –†–æ–ª—å: ${existingAdmin.role}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${existingAdmin.createdAt}`);
      return;
    }
    
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash('admin123', 12);
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const adminUser = new User({
      email: 'admin@test.com',
      password: hashedPassword,
      firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      lastName: '–°–∏—Å—Ç–µ–º—ã',
      whatsappNumber: '+77771234560',
      role: 'admin',
      hasStudentAccess: false,
      isSchoolStudent: false,
      isEmailVerified: true,
      isWhatsappVerified: true,
      isActive: true,
      loginAttempts: 0
    });
    
    await adminUser.save();
    
    console.log('‚úÖ –ê–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üìß Email: admin@test.com');
    console.log('üîë –ü–∞—Ä–æ–ª—å: admin123');
    console.log('üë§ –†–æ–ª—å: admin');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
};

createAdminUser();