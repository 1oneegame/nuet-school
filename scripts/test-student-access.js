const axios = require('axios');
const jwt = require('jsonwebtoken');
require('dotenv').config({ path: '.env.local' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3000';
const JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-key-for-development';

console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π JWT_SECRET:', JWT_SECRET ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');

// –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const testStudent = {
  userId: '507f1f77bcf86cd799439011',
  email: 'student1@test.com',
  role: 'Student',
  hasStudentAccess: true
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
function createToken(payload, expiresIn = '24h') {
  return jwt.sign(payload, JWT_SECRET, { expiresIn });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoint
async function testEndpoint(description, url, headers = {}) {
  console.log(`\nüß™ –¢–µ—Å—Ç: ${description}`);
  console.log(`üìç URL: ${url}`);
  
  try {
    const response = await axios.get(url, { headers });
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`üìÑ –û—Ç–≤–µ—Ç:`, JSON.stringify(response.data, null, 2));
    return { success: true, status: response.status, data: response.data };
  } catch (error) {
    if (error.response) {
      console.log(`‚ùå –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.log(`üìÑ –û—à–∏–±–∫–∞:`, JSON.stringify(error.response.data, null, 2));
      return { success: false, status: error.response.status, data: error.response.data };
    } else {
      console.log(`üí• –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:`, error.message);
      return { success: false, error: error.message };
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º—É –¥–∞—à–±–æ—Ä–¥—É');
  console.log('=' .repeat(60));

  const testUrl = `${BASE_URL}/api/test/student-access`;
  
  // –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
  const test1 = await testEndpoint(
    '–î–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
    testUrl
  );
  
  // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
  const test2 = await testEndpoint(
    '–î–æ—Å—Ç—É–ø —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º',
    testUrl,
    { 'Authorization': 'Bearer invalid-token-here' }
  );
  
  // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
  const expiredToken = createToken(testStudent, '-1h'); // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ —á–∞—Å –Ω–∞–∑–∞–¥
  const test3 = await testEndpoint(
    '–î–æ—Å—Ç—É–ø —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º',
    testUrl,
    { 'Authorization': `Bearer ${expiredToken}` }
  );
  
  // –¢–µ—Å—Ç 4: –ó–∞–ø—Ä–æ—Å —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 200)
  const validToken = createToken(testStudent);
  const test4 = await testEndpoint(
    '–î–æ—Å—Ç—É–ø —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º —Å—Ç—É–¥–µ–Ω—Ç–∞',
    testUrl,
    { 'Authorization': `Bearer ${validToken}` }
  );
  
  // –¢–µ—Å—Ç 5: –ó–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 403)
  const userWithoutAccess = {
    userId: '507f1f77bcf86cd799439999',
    email: 'noacccess@test.com',
    role: 'User',
    hasStudentAccess: false
  };
  const noAccessToken = createToken(userWithoutAccess);
  const test5 = await testEndpoint(
    '–î–æ—Å—Ç—É–ø —Å —Ç–æ–∫–µ–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–∞–≤',
    testUrl,
    { 'Authorization': `Bearer ${noAccessToken}` }
  );

  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\n' + '=' .repeat(60));
  console.log('üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('=' .repeat(60));
  
  const tests = [
    { name: '–ë–µ–∑ —Ç–æ–∫–µ–Ω–∞', result: test1, expected: 401 },
    { name: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω', result: test2, expected: 401 },
    { name: '–ò—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω', result: test3, expected: 401 },
    { name: '–í–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞', result: test4, expected: 200 },
    { name: '–¢–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', result: test5, expected: 403 }
  ];
  
  let passedTests = 0;
  
  tests.forEach((test, index) => {
    const status = test.result.status || 'ERROR';
    const passed = status === test.expected;
    const icon = passed ? '‚úÖ' : '‚ùå';
    
    console.log(`${icon} –¢–µ—Å—Ç ${index + 1}: ${test.name}`);
    console.log(`   –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å: ${test.expected}, –ø–æ–ª—É—á–µ–Ω: ${status}`);
    
    if (passed) passedTests++;
  });
  
  console.log('\n' + '-'.repeat(40));
  console.log(`üéØ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${tests.length}`);
  
  if (passedTests === tests.length) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ó–∞—â–∏—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞—â–∏—Ç—ã.');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { runTests, testEndpoint, createToken };