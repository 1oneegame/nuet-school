const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let User;
try {
  User = require('./src/backend/models/User');
} catch (error) {
  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    firstName: String,
    lastName: String,
    whatsappNumber: String,
    role: { type: String, default: 'User' },
    hasStudentAccess: { type: Boolean, default: false },
    isSchoolStudent: { type: Boolean, default: false },
    isEmailVerified: { type: Boolean, default: false },
    isWhatsappVerified: { type: Boolean, default: false },
    isActive: { type: Boolean, default: true },
    loginAttempts: { type: Number, default: 0 },
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now }
  }, { collection: 'users' });
  
  User = mongoose.model('User', userSchema);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ URI
const connectToMongoDB = async () => {
  const possibleURIs = [
    process.env.MONGODB_URI,
    'mongodb://localhost:27017/nuet-app',
    'mongodb://127.0.0.1:27017/nuet-app',
    'mongodb://localhost:27017/240school',
    'mongodb://127.0.0.1:27017/240school'
  ];

  for (const uri of possibleURIs) {
    if (!uri) continue;
    
    try {
      console.log(`–ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫: ${uri.replace(/\/\/.*@/, '//***:***@')}`);
      await mongoose.connect(uri, {
        serverSelectionTimeoutMS: 5000,
        socketTimeoutMS: 45000,
      });
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ!');
      return true;
    } catch (error) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${uri}: ${error.message}`);
    }
  }
  
  throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
};

async function createTestUsers() {
  try {
    await connectToMongoDB();

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏
    const studentPassword = await bcrypt.hash('student123', 12);
    const adminPassword = await bcrypt.hash('admin123', 12);
    const noAccessPassword = await bcrypt.hash('noaccess123', 12);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUsers = [
      // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã
      {
        _id: new mongoose.Types.ObjectId('507f1f77bcf86cd799439011'),
        email: 'student1@test.com',
        password: studentPassword,
        whatsappNumber: '+77771234567',
        firstName: '–ê–π–¥–∞—Ä',
        lastName: '–¢–µ—Å—Ç–æ–≤',
        role: 'Student',
        hasStudentAccess: true,
        isSchoolStudent: true,
        isEmailVerified: true,
        isWhatsappVerified: true,
        isActive: true
      },
      {
        _id: new mongoose.Types.ObjectId('507f1f77bcf86cd799439012'),
        email: 'student2@test.com',
        password: studentPassword,
        whatsappNumber: '+77771234568',
        firstName: '–ê–º–∏–Ω–∞',
        lastName: '–°—Ç—É–¥–µ–Ω—Ç–æ–≤–∞',
        role: 'Student',
        hasStudentAccess: true,
        isSchoolStudent: true,
        isEmailVerified: true,
        isWhatsappVerified: true,
        isActive: true
      },
      {
        _id: new mongoose.Types.ObjectId('507f1f77bcf86cd799439013'),
        email: 'student3@test.com',
        password: studentPassword,
        whatsappNumber: '+77771234569',
        firstName: '–î–∞–Ω–∏—è—Ä',
        lastName: '–£—á–µ–Ω–∏–∫–æ–≤–∏—á',
        role: 'Student',
        hasStudentAccess: true,
        isSchoolStudent: true,
        isEmailVerified: true,
        isWhatsappVerified: true,
        isActive: true
      },
      // –ê–¥–º–∏–Ω
      {
        email: 'admin@test.com',
        password: adminPassword,
        whatsappNumber: '+77771234560',
        firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        lastName: '–°–∏—Å—Ç–µ–º—ã',
        role: 'admin',
        hasStudentAccess: false,
        isSchoolStudent: false,
        isEmailVerified: true,
        isWhatsappVerified: true,
        isActive: true
      },
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
      {
        _id: new mongoose.Types.ObjectId('507f1f77bcf86cd799439999'),
        email: 'noaccess@test.com',
        password: noAccessPassword,
        whatsappNumber: '+77771234999',
        firstName: '–ë–µ–∑',
        lastName: '–î–æ—Å—Ç—É–ø–∞',
        role: 'User',
        hasStudentAccess: false,
        isSchoolStudent: false,
        isEmailVerified: true,
        isWhatsappVerified: true,
        isActive: true
      }
    ];

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const emailsToDelete = testUsers.map(user => user.email);
    await User.deleteMany({ email: { $in: emailsToDelete } });
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers = await User.insertMany(testUsers);
    
    console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    console.log('='.repeat(50));
    
    createdUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.firstName} ${user.lastName}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   WhatsApp: ${user.whatsappNumber}`);
      console.log(`   –†–æ–ª—å: ${user.role}`);
      console.log(`   –î–æ—Å—Ç—É–ø –∫ –¥–∞—à–±–æ—Ä–¥—É: ${user.hasStudentAccess ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      console.log('   ---');
    });

    console.log('\nüìù –ü–∞—Ä–æ–ª–∏ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('–°—Ç—É–¥–µ–Ω—Ç—ã: student123');
    console.log('–ê–¥–º–∏–Ω: admin123');
    console.log('–ë–µ–∑ –¥–æ—Å—Ç—É–ø–∞: noaccess123');
    console.log('\nüéâ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

createTestUsers();
