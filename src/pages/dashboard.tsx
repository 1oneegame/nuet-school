import React from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { GetServerSideProps } from 'next';
import jwt from 'jsonwebtoken';

const Dashboard: React.FC = () => {
  const router = useRouter();

  const handleLogout = () => {
    // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    
    // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
    document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    router.push('/auth');
  };

  const menuItems = [
    {
      title: '–ù–£–ï–¢ –í–∏–¥–µ–æ–∫—É—Ä—Å',
      description: '–ü–æ–ª–Ω—ã–π –∫—É—Ä—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ù–£–ï–¢ —Å –≤–∏–¥–µ–æ–ª–µ–∫—Ü–∏—è–º–∏',
      href: '/student/video-course',
      icon: 'üé•',
      color: 'bg-blue-500'
    },
    {
      title: 'NUET Practice',
      description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
      href: '/student/practice',
      icon: 'üìù',
      color: 'bg-green-500'
    },
    {
      title: 'Critical Thinking Training',
      description: '–†–∞–∑–≤–∏—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è',
      href: '/student/critical-thinking',
      icon: 'üß†',
      color: 'bg-purple-500'
    },
    {
      title: 'Other Studying Materials',
      description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è',
      href: '/student/materials',
      icon: 'üìö',
      color: 'bg-orange-500'
    }
  ];

  return (
    <>
      <Head>
        <title>–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ | 240 School</title>
        <meta name="description" content="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ 240 School" />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-6">
              <div className="flex items-center">
                <h1 className="text-2xl font-bold text-gray-900">240 School</h1>
              </div>
              <div className="flex items-center space-x-4">
                <span className="text-gray-700">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</span>
                <button
                  onClick={handleLogout}
                  className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium transition duration-150 ease-in-out"
                >
                  –í—ã–π—Ç–∏
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
          <div className="px-4 py-6 sm:px-0">
            <div className="mb-8">
              <h2 className="text-3xl font-bold text-gray-900 mb-2">–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥</h2>
              <p className="text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</p>
            </div>

            {/* Menu Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
              {menuItems.map((item, index) => (
                <Link key={index} href={item.href}>
                  <div className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 cursor-pointer overflow-hidden">
                    <div className={`${item.color} h-2`}></div>
                    <div className="p-6">
                      <div className="flex items-center mb-4">
                        <span className="text-3xl mr-4">{item.icon}</span>
                        <h3 className="text-xl font-semibold text-gray-900">{item.title}</h3>
                      </div>
                      <p className="text-gray-600 mb-4">{item.description}</p>
                      <div className="flex justify-end">
                        <span className="text-blue-600 font-medium hover:text-blue-800 transition-colors">
                          –ü–µ—Ä–µ–π—Ç–∏ ‚Üí
                        </span>
                      </div>
                    </div>
                  </div>
                </Link>
              ))}
            </div>

            {/* Stats Section */}
            <div className="mt-12 bg-white rounded-lg shadow-md p-6">
              <h3 className="text-xl font-semibold text-gray-900 mb-4">–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">0%</div>
                  <div className="text-sm text-gray-600">–í–∏–¥–µ–æ–∫—É—Ä—Å</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">0%</div>
                  <div className="text-sm text-gray-600">–ü—Ä–∞–∫—Ç–∏–∫–∞</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">0%</div>
                  <div className="text-sm text-gray-600">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">0</div>
                  <div className="text-sm text-gray-600">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑—É—á–µ–Ω–æ</div>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { req } = context;
  const token = req.cookies.token;

  if (!token) {
    return {
      redirect: {
        destination: '/auth',
        permanent: false,
      },
    };
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º—É –¥–∞—à–±–æ—Ä–¥—É
    if (!decoded.hasStudentAccess) {
      return {
        redirect: {
          destination: '/access-denied',
          permanent: false,
        },
      };
    }

    return {
      props: {},
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    return {
      redirect: {
        destination: '/auth',
        permanent: false,
      },
    };
  }
};

export default Dashboard;